##########
# Setup
#
AC_INIT(sqliteodbc.h)
AM_PROG_LIBTOOL
AC_PROG_INSTALL
CC=${CC:-cc}
AC_SUBST(CC)
AC_SUBST(CFLAGS)
VER_INFO=`cat VERSION`

##########
# Find SQLite header file and library
#
AC_ARG_WITH(sqlite, [  --with-sqlite=DIR       use SQLite header/lib from DIR],
   SQLITE_DIR=$withval)
if test -n "$SQLITE_DIR" ; then
   if test ! -d "$SQLITE_DIR" ; then
      AC_MSG_ERROR(SQLite directory $SQLITE_DIR does not exist)
   fi
fi

if test -z "$SQLITE_DIR" ; then
   SQLITE_DIR="../sqlite /usr /usr/local /opt"
fi

AC_MSG_CHECKING([for SQLite header and library])
SQLITE_INC=UNKNOWN
SQLITE_LIB=UNKNOWN
SQLITE_LIBDIR=../sqlite
for i in $SQLITE_DIR ; do
   if test -r "$i/sqlite.h" ; then
      if test -r "$i/libsqlite.la" ; then
         SQLITE_INC="$i"
         SQLITE_LIB="$i/libsqlite.la"
         SQLITE_LIBDIR=$i
         break
      fi
   elif test -r "$i/include/sqlite.h" ; then
      if test -r "$i/lib/libsqlite.la" ; then
         SQLITE_INC="$i/include"
         SQLITE_LIB="$i/lib/libsqlite.la"
         SQLITE_LIBDIR="$i/lib"
         break
      fi
   fi
done
if test "$SQLITE_INC" = "UNKNOWN" -o "$SQLITE_LIB" = "UNKNOWN" ; then
   AC_MSG_RESULT(no)
   AC_MSG_ERROR(SQLite header files and/or library not found)
else
   AC_MSG_RESULT(yes)
fi

AC_SUBST(SQLITE_INC)
AC_SUBST(SQLITE_LIB)

# test for availability of sqlite_libversion() et.al.

saved_CFLAGS=$CFLAGS
CFLAGS="$CFLAGS -I$SQLITE_INC"
saved_LIBS=$LIBS
LIBS="$LIBS -L$SQLITE_LIBDIR"
AC_CHECK_LIB(sqlite,sqlite_libversion,SQLITE_LIBVERSION=1,SQLITE_LIBVERSION=0)
AC_CHECK_LIB(sqlite,sqlite_compile,SQLITE_COMPILE=1,SQLITE_COMPILE=0)
AC_CHECK_LIB(sqlite,sqlite_encode_binary,SQLITE_ENCDEC=1,SQLITE_ENCDEC=0)
AC_CHECK_LIB(sqlite,sqliteAtoF,SQLITE_ATOF=1,SQLITE_ATOF=0)
AC_CHECK_LIB(sqlite,sqlite_mprintf,SQLITE_MPRINTF=1,SQLITE_MPRINTF=0)
AC_CHECK_LIB(sqlite,sqlite_trace,SQLITE_TRACE=1,SQLITE_TRACE=0)
LIBS=$saved_LIBS
CFLAGS=$saved_CFLAGS
AC_SUBST(SQLITE_LIBVERSION)
AC_SUBST(SQLITE_ENCDEC)
AC_SUBST(SQLITE_ATOF)
AC_SUBST(SQLITE_MPRINTF)
AC_SUBST(SQLITE_TRACE)
if test "$SQLITE_COMPILE" = "0" ; then
   AC_MSG_WARN(SQLite library too old, need 2.8.0 or later)
else
   LIB_TARGETS="$LIB_TARGETS libsqliteodbc.la"
   INST_TARGETS="$INST_TARGETS install-2"
fi

##########
# Find SQLite3 header file and library
#
AC_ARG_WITH(sqlite3,[  --with-sqlite3=DIR      use SQLite3 hdr/lib from DIR],
   SQLITE3_DIR=$withval)
if test -n "$SQLITE3_DIR" ; then
   if test ! -d "$SQLITE3_DIR" ; then
      AC_MSG_WARN(SQLite3 directory $SQLITE3_DIR does not exist)
   fi
fi

if test -z "$SQLITE3_DIR" ; then
   SQLITE3_DIR="../sqlite /usr /usr/local /opt"
fi

AC_MSG_CHECKING([for SQLite3 header and library])
SQLITE3_INC=UNKNOWN
SQLITE3_LIB=UNKNOWN
SQLITE3_LIBDIR=../sqlite
for i in $SQLITE3_DIR ; do
   if test -r "$i/sqlite3.h" ; then
      if test -r "$i/libsqlite3.la" ; then
         SQLITE3_INC="$i"
         SQLITE3_LIB="$i/libsqlite3.la"
         SQLITE3_LIBDIR=$i
         break
      fi
   elif test -r "$i/include/sqlite3.h" ; then
      if test -r "$i/lib/libsqlite3.la" ; then
         SQLITE3_INC="$i/include"
         SQLITE3_LIB="$i/lib/libsqlite3.la"
         SQLITE3_LIBDIR="$i/lib"
         break
      fi
   fi
done
if test "$SQLITE3_INC" = "UNKNOWN" -o "$SQLITE3_LIB" = "UNKNOWN" ; then
   AC_MSG_RESULT(no)
   AC_MSG_WARN(SQLite3 header files and/or library not found)
else
   AC_MSG_RESULT(yes)
   LIB_TARGETS="$LIB_TARGETS libsqlite3odbc.la"
   INST_TARGETS="$INST_TARGETS install-3"
fi
AC_SUBST(SQLITE3_INC)
AC_SUBST(SQLITE3_LIB)

# test for availability of library functions

saved_CFLAGS=$CFLAGS
CFLAGS="$CFLAGS -I$SQLITE3_INC"
saved_LIBS=$LIBS
LIBS="$LIBS -L$SQLITE3_LIBDIR"
AC_CHECK_LIB(sqlite3,sqlite3AtoF,SQLITE3_ATOF=1,SQLITE3_ATOF=0)
LIBS=$saved_LIBS
CFLAGS=$saved_CFLAGS
if test "$SQLITE3_ATOF" = 1 ; then
   SQLITE3_FLAGS="$SQLITE3_FLAGS -DHAVE_SQLITE3ATOF"
fi
AC_SUBST(SQLITE3_FLAGS)

#########
# Any SQLite to be done ?

if test "X$LIB_TARGETS" = "X" ; then
   AC_MSG_ERROR(No usable SQLite header/library on this system)
fi
AC_SUBST(LIB_TARGETS)
AC_SUBST(INST_TARGETS)

#########
# Find ODBC headers and libraries
#
AC_ARG_WITH(odbc, [  --with-odbc=DIR         use ODBC header/libs from DIR],
   ODBC_DIR=$withval)
if test -n "$ODBC_DIR" ; then
   if test ! -d "$ODBC_DIR" ; then
      AC_MSG_ERROR(ODBC directory $ODBC_DIR does not exist)
   fi
fi

if test -z "$ODBC_DIR" ; then
   ODBC_DIR="/usr /usr/local /opt"
fi

AC_MSG_CHECKING([for ODBC headers and libraries])
ODBC_FLAGS=UNKNOWN
ODBC_LIB=UNKNOWN
for i in $ODBC_DIR ; do
   if test -r "$i/include/sql.h" ; then
      if test -r "$i/include/iodbcinst.h" ; then
         ODBC_FLAGS="-DHAVE_IODBC=1 -I$i/include"
         if test -r "$i/lib/libiodbcinst.la" ; then
            ODBC_LIB="$i/lib/libiodbcinst.la"
         else
            ODBC_LIB=-lodbcinst
         fi
         break
      elif test -r "$i/include/odbcinst.h" ; then
         ODBC_FLAGS="-DHAVE_UNIXODBC=1 -I$i/include"
         if test -r "$i/lib/libodbcinst.la" ; then
            ODBC_LIB="$i/lib/libodbcinst.la"
         else
            ODBC_LIB=-lodbcinst
         fi
         if test -r "$i/include/odbcinstext.h" ; then
	    ODBC_FLAGS="$ODBC_FLAGS -DHAVE_ODBCINSTEXT_H=1"
	    if test -r "$i/include/log.h" -a -r "$i/include/ini.h" ; then
	       : no need for replacements
	    else
	       ODBC_FLAGS="$ODBC_FLAGS -Imissing"
	    fi
         fi
         break
      fi
   fi
done
if test "$ODBC_FLAGS" = "UNKNOWN" -o "$ODBC_LIB" = "UNKNOWN" ; then
   AC_MSG_RESULT(no)
   AC_MSG_ERROR(ODBC header files and/or libraries not found)
else
   AC_MSG_RESULT(yes)
fi

##########
# Experimental: use dlopen for resolving SQLGetPrivateProfileString
# dynamically
#
AC_ARG_ENABLE(gppsbdl, [  --enable-gppsbdl        use dlopen for GPPS],
   GPPSBDL=$enable_gppsbdl)
if test "$GPPSBDL" = "yes" ; then
   AC_CHECK_LIB(dl,dlopen,GPPSBDL=yes,GPPSBDL=no)
fi
if test "$GPPSBDL" = "yes" ; then
   AC_MSG_CHECKING([use dlopen for GPPS])
   ODBC_FLAGS="$ODBC_FLAGS -DUSE_DLOPEN_FOR_GPPS"
   ODBC_LIB="-ldl"
   AC_MSG_RESULT(yes)
fi

AC_SUBST(ODBC_FLAGS)
AC_SUBST(ODBC_LIB)
AC_SUBST(VER_INFO)

##########
# Check for usleep()
#
AC_CHECK_FUNC(usleep, [ODBC_FLAGS="$ODBC_FLAGS -DHAVE_USLEEP=1"])

##########
# Check for localeconv()
#
AC_CHECK_FUNC(localeconv, [ODBC_FLAGS="$ODBC_FLAGS -DHAVE_LOCALECONV=1"])

##########
# Check for localtime_r()
#
AC_CHECK_FUNC(localtime_r, [ODBC_FLAGS="$ODBC_FLAGS -DHAVE_LOCALTIME_R=1"])

##########
# Check for gmtime_r()
#
AC_CHECK_FUNC(gmtime_r, [ODBC_FLAGS="$ODBC_FLAGS -DHAVE_GMTIME_R=1"])

#########
# Generate the output files.
#
AC_OUTPUT(Makefile sqliteodbc.spec)
