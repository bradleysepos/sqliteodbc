##########
# Setup
#
AC_INIT(sqliteodbc.h)
AM_PROG_LIBTOOL
AC_PROG_INSTALL
CC=${CC:-cc}
AC_SUBST(CC)
VER_INFO=$(cat VERSION)

##########
# Find SQLite header file and library
#
AC_ARG_WITH(sqlite, [  --with-sqlite=DIR       use SQLite header/lib from DIR],
  SQLITE_DIR=$withval)
if test ! -d $SQLITE_DIR ; then
  AC_MSG_ERROR(SQLite directory $SQLITE_DIR does not exist)
fi

if test -z "$SQLITE_DIR" ; then
  SQLITE_DIR="../sqlite /usr /usr/local /opt"
fi

AC_MSG_CHECKING([for SQLite header and library])
SQLITE_INC=UNKNOWN
SQLITE_LIB=UNKNOWN
SQLITE_LIBDIR=../sqlite
for i in $SQLITE_DIR ; do
  if test -r $i/sqlite.h ; then
    if test -r $i/libsqlite.la ; then
      SQLITE_INC="$i"
      SQLITE_LIB="$i/libsqlite.la"
      SQLITE_LIBDIR=$i
      break
    fi
  elif test -r $i/include/sqlite.h ; then
    if test -r $i/lib/libsqlite.la ; then
      SQLITE_INC="$i"
      SQLITE_LIB="$i/lib/libsqlite.la"
      SQLITE_LIBDIR=$i
      break
    fi
  fi
done
if test "$SQLITE_INC" = "UNKNOWN" -o "$SQLITE_LIB" = "UNKNOWN" ; then
  AC_MSG_RESULT(no)
  AC_MSG_ERROR(SQLite header files and/or library not found)
else
  AC_MSG_RESULT(yes)
fi
AC_SUBST(SQLITE_INC)
AC_SUBST(SQLITE_LIB)

# test for availability of sqlite_libversion()

saved_CFLAGS=$CFLAGS
CFLAGS="$CFLAGS -I$SQLITE_INC"
saved_LIBS=$LIBS
LIBS="$LIBS -L$SQLITE_LIBDIR"
AC_CHECK_LIB(sqlite,sqlite_libversion,SQLITE_LIBVERSION=1,SQLITE_LIBVERSION=0)
LIBS=$saved_LIBS
CFLAGS=$saved_CFLAGS
AC_SUBST(SQLITE_LIBVERSION)

#########
# Find ODBC headers and libraries
#
AC_ARG_WITH(odbc, [  --with-odbc=DIR         use ODBC header/libs from DIR],
  ODBC_DIR=$withval)
if test ! -d $ODBC_DIR ; then
  AC_MSG_ERROR(ODBC directory $ODBC_DIR does not exist)
fi

if test -z "$ODBC_DIR" ; then
  ODBC_DIR="/usr /usr/local /opt"
fi

AC_MSG_CHECKING([for ODBC headers and libraries])
ODBC_FLAGS=UNKNOWN
ODBC_LIB=UNKNOWN
for i in $ODBC_DIR ; do
  if test -r $i/include/sql.h ; then
    if test -r $i/include/iodbcinst.h ; then
      ODBC_FLAGS="-DHAVE_IODBC=1 -I$i/include"
      if test -r $i/lib/libiodbcinst.la ; then
        ODBC_LIB="$i/lib/libiodbcinst.la"
      else
        ODBC_LIB=-lodbcinst
      fi
      break
    elif test -r $i/include/odbcinst.h ; then
      ODBC_FLAGS="-DHAVE_UNIXODBC=1 -I$i/include"
      if test -r $i/lib/libodbcinst.la ; then
        ODBC_LIB="$i/lib/libodbcinst.la"
      else
        ODBC_LIB=-lodbcinst
      fi
      break
    fi
  fi
done
if test "$ODBC_FLAGS" = "UNKNOWN" -o "$ODBC_LIB" = "UNKNOWN" ; then
  AC_MSG_RESULT(no)
  AC_MSG_ERROR(ODBC header files and/or libraries not found)
else
  AC_MSG_RESULT(yes)
fi
AC_SUBST(ODBC_FLAGS)
AC_SUBST(ODBC_LIB)
AC_SUBST(VER_INFO)

##########
# Find pthread header file and library
#
AC_MSG_CHECKING(build with threading)
AC_ARG_ENABLE(threads, [  --enable-threads        build with threading],
  [USE_THREADS=$enableval], [USE_THREADS=no])
if test "$USE_THREADS" = "yes" ; then
  AC_MSG_RESULT(yes)
  AC_CHECK_LIB(pthread,pthread_mutex_init,thread_ok=yes,thread_ok=no)
  if test "$thread_ok" = "no" ; then
    AC_CHECK_LIB(pthread,__pthread_mutex_init,thread_ok=yes,thread_ok=no)
  fi
  if test "$thread_ok" = "yes" ; then
    THREAD_LIB="-lpthread"
    THREAD_FLAGS="-DHAVE_PTHREAD=1 -D_REENTRANT -D_THREAD_SAFE"
  else
    AC_CHECK_LIB(pthreads,pthread_mutex_init,thread_ok=yes,thread_ok=no)
    if test "$thread_ok" = "yes" ; then
      THREAD_LIB="-lpthreads"
      THREAD_FLAGS="-DHAVE_PTHREAD=1 -D_REENTRANT -D_THREAD_SAFE"
    else
      AC_CHECK_LIB(c,pthread_mutex_init,thread_ok=yes,thread_ok=no)
      if test "$thread_ok" = "yes" ; then
        THREAD_FLAGS="-DHAVE_PTHREAD=1 -D_REENTRANT -D_THREAD_SAFE"
      fi
    fi
  fi
  if test "$THREAD_FLAGS" = "" ; then
    AC_MSG_ERROR(Threading not usable on this system)
  fi
else
  AC_MSG_RESULT(no)
fi
AC_SUBST(THREAD_LIB)
AC_SUBST(THREAD_FLAGS)

##########
# Find coro header file and library
#
AC_ARG_WITH(coro, [  --with-coro=DIR         use coroutine hdr/lib from DIR],
  CORO_DIR=$withval)
if test -n "$CORO_DIR" ; then
  if test ! -d $CORO_DIR ; then
    AC_MSG_ERROR(CORO directory $CORO_DIR does not exist)
  else
    AC_MSG_CHECKING([for coroutine hdr/lib])
    CORO_FLAGS=
    CORO_LIB=
    for i in $CORO_DIR ; do
      if test -r $i/include/coro.h -a -r $i/lib/libcoro.a ; then
        CORO_FLAGS="-DHAVE_CORO=1 -I$i/include"
        CORO_LIB="-L$i/lib -lcoro"
      elif test -r $i/coro.h -a -r $i/libcoro.a ; then
        CORO_FLAGS="-DHAVE_CORO=1 -I$i"
        CORO_LIB="-L$i -lcoro"
      fi
    done
    if test -n "$CORO_FLAGS" ; then
      AC_MSG_RESULT(yes)
      saved_CFLAGS=$CFLAGS
      CFLAGS="$CFLAGS $CORO_FLAGS"
      saved_LIBS=$LIBS
      LIBS="$LIBS $CORO_LIB"
      unset ac_cv_lib_coro_co_create || ac_cv_lib_coro_co_create=""
      AC_CHECK_LIB(coro,co_create,CORO_GOOD=1,CORO_GOOD=0)
      if test $CORO_GOOD = 0 ; then
        LIBS="$LIBS -lpthread"
        unset ac_cv_lib_coro_co_create || ac_cv_lib_coro_co_create=""
        AC_CHECK_LIB(coro,co_create,CORO_GOOD=1,CORO_GOOD=0)
        if test $CORO_GOOD = 1 ; then
          CORO_LIBS="$CORO_LIBS -lpthread"
        else
          CORO_FLAGS=
          CORO_LIB=
        fi
      fi
      CFLAGS="$saved_CFLAGS"
      LIBS="$saved_LIBS"
    else
      AC_MSG_RESULT(no)
    fi
  fi
fi
AC_SUBST(CORO_FLAGS)
AC_SUBST(CORO_LIB)

#########
# Generate the output files.
#
AC_OUTPUT(Makefile sqliteodbc.spec)
